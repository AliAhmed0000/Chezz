;---------part1---------------------
 changetograph macro 
    mov ah,0
    mov al,13h
    int 10h
 endm  changetograph


 changetotxt macro
    mov ah,0
    mov al,3h
    int 10h
 endm  changetotxt

 clearScrean macro

    mov ax,0000h
    mov bh,07h
    mov cx,0
    mov dh,25d
    mov dl,80d
    int 10h

 endm clearScrean

 displayString macro str    
           
    mov ah, 9h
    mov dx, offset str
    int 21h
        
 endm displayString 

 setCursor macro x,y
    mov bh, 0h
    mov ah,2h
    mov dl,x
    mov dh,y
    int 10h

endm setCursor


 drawHLine macro y2

    mov cx,0 ;Column
    mov dx,y2 ;Row
    mov al,0Fh ;Pixel color
    mov ah,0ch ;Draw Pixel Command
    back: int 10h
    inc cx
    cmp cx,320d
    jnz back

 endm drawHLine


 getKey macro
    

    mov ah,0
    int 16h

 endm getKey

 checkKey macro

    cmp ah,3Bh
    jz F1

    cmp ah,3Ch
    jz F2

    cmp ah,01
    jz ESC1

    mov al,0d
    jmp finish


    F1:
    mov al,1d
    jmp finish

    F2:
    mov al,2d
    jmp finish

    ESC1:
    mov al,3d
    jmp finish

    finish:
 endm checkKey

 get_user_num Macro;  the num is stored @ cl                  
                     ;ex:  num= 12  
                
             mov ah,1 
             
             int 21h ;al = ascii al 31 
             
             sub al,30h; now al=1 
             
             mov bl,al;bl=1
             
             mov ah,1
             int 21h       ;  al=ascii ex al 32
             sub al,30h    ;  al=2
             
            ;  mov  ah,al  
            
             mov cl,al 
             
             mov al,10d; hexa not deci
             
             mul bl;ax=al*bl=10*1=0010->al=10 ===>> ah=00
            
             add cl,al;cl=cl+al=2+10=12
                  
 ENDM  get_user_num     
 ;----------  *****************************************
 display_new_line Macro

    mov ah,9  
    mov dx,offset nw_line   

    int 21h
 endm display_new_line
 ;---------   ****************************************
 display_Message MACRO MyMessage

    mov ah,9h

    mov dx,offset MyMessage

    int 21h

 ENDM display_Message
 ;------------ ****************************************
 UserN_validatin MACRO  Useri_Name   
    local check_UN,invalid_UN,press_enter,end_check
                      
              check_UN: 
              
              ;;; invalid ==> mov ax,offset username+2; both first two element are size 
              
                       mov al,Useri_Name+2   ;al == we need first character 
                         
                       cmp al,41h;hexa
                                       ;if char bigger than((A))
                       jc invalid_UN 
                       
                       ;******
                       
                       cmp al,7Bh  ;if char > z ==>> not valid
                                 
                       jnc invalid_UN 
                       
                       ;******
                        
                       cmp al,5Bh
                                 ;if char > z ==>> not valid
               
                                 ;if cf=1 ===>> this menas char is=<z
                                 
                       jc end_check
                        
                       ;**====== 
                       
                       cmp al,61h     ;  hexa not decima
                       
                       jnc end_check  ;if(char>=a); this valid 
                       
                                      ;else do the invalid username code 
                                    
                       ;---**======
                       
                       
            invalid_UN: 
            
            display_new_line 
            display_Message MSG4
                        
                        ;///////  
                        
             press_enter: 
             display_new_line
             display_Message MSG6
                         
                       
                       mov ah,07
                        int 21h;read without echo one char and putting @ al  
                        
                        cmp al,0Dh;enter key === >> from ascii table 
                        jnz press_enter;if the user pressed another key which not ENTER, DISP a message waiting hom press ENETR
                        
                        
                       ;------**======
                       
                       mov ax,0600h
                       mov bh,07 
                       mov cx,0 
                       mov dx,184FH
                       int 10h 
                       
                       ;******
                       
                       set_cursor_at_middle 
                       
                       ;******
                       
                        display_Message MSG1  
                        display_new_line
                                  
                        MOV AH,0AH
                        MOV DX , OFFSET Useri_Name
                        INT 21H 
                        
                        jmp check_UN       
                               
            end_check:
    
 ENDM UserN_validatin  
 ;------------*****************************************  
 set_cursor_at_middle MACRO      
                    
                    
                     mov ah,2
                     mov dh,2h
                     ;mov dl,2h ====x
                     mov dl,2h 
                     
                     mov bh,0
                     int 10h
    
 ENDM set_cursor_at_middle  
 ;------------*****************************************
 username_interface MACRO  Useri_Name
                  
                  set_cursor_at_middle 
                   ;------------
                  display_Message MSG1  
                  display_new_line
                                  
                  MOV AH,0AH
                  MOV DX , OFFSET Useri_Name
                  INT 21H  
                  
                  UserN_validatin Useri_Name                                 
                 ;------------
                 display_new_line               
                 display_Message MSG2 
                 ;------------     
                 display_new_line                  
                 get_user_num 
                 
                 mov ch,0;cl == the num , ch must set to be 0 (so that make the number=00cl)for the cmp bet. both initial point
                 push cx;saving initial points result a stack
                  ;------------
                  display_new_line 
                  display_Message MSG3  
    
 ENDM  username_interface
;--------------------------

;--------------------------end part1-------------------
draw_rect MACRO color
local l1
    mov dx,di
    mov bh,20
    mov al,color
    l1: mov cx,40
        rep STOSB
        add dx,320
        mov di,dx
        dec BH
        jnz l1
endm draw_rect
;------------
draw_piece MACRO piece,x_piece,y_piece
local l1,l2,skip_draw

mov si,offset piece
mov al,piece           ;just for storing the piece in piece_background
mov piece_background,al;to know background color of piece
mov ax,20d
mov bl,y_piece
mov bh,0
mul bx  ; ax = y * 20
mov bx,ax
mov piece_y_end,bx
add piece_y_end,20d
l1:
    mov al,x_piece
    mov ah,0
    mov di,ax
    mov ax,40d
    mul di ;ax = x * 40
    mov di,ax
    mov piece_x_end,di
    add piece_x_end,40d ;40d
    l2:
            mov cx,di;column

            mov dx,bx;row
            mov ax,[si]
            mov ah,0ch  ;draw pixel
            cmp piece_background,al
            je skip_draw
            int 10h
        skip_draw:

            inc si

      inc di
      cmp di,piece_x_end
      jne l2
inc bx
cmp bx,piece_y_end
jne l1

endm draw_piece
;------------
draw_rect_trans MACRO color
    local l1,l2,l3,end
        mov dx,di
        mov bl,es:[di];bl = old color of square
        mov w_counter,40
        mov l_counter,20
        mov al,color
        l1: cmp es:[di],bl
            jnz l2
            
            mov cx,1
            rep stosb
            
        l3: dec w_counter
            jnz l1
            mov w_counter,40
            add dx,320
            mov di,dx
            dec l_counter
            jnz l1
            jmp end
            
            l2: inc di
            jmp l3
      end:           
endm draw_rect_trans
;------------
;if row + column is even then background color1 (color of first square) else color2
check_square_color MACRO row,column ;if color1 then return al=0 else 1
local even_place,end_check
    mov al,row
    add al,column
    and al,1        ;if last bit is 1 then odd else even
    jz even_place   ;even
    mov al,1 ;odd
    jmp end_check
even_place:
    mov al,0 ;even
end_check:
endm check_square_color
;------------draw_rectangle don't draw on existing pixels
draw_rectangle macro x_rect,y_rect,color_rect
local l11,l22,skip_me

    mov ax,20d
    mov bl,y_rect
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    mov rect_y_end,bx
    add rect_y_end,20d
    l11:
        mov ax,40d
        mov dl,x_rect
        mov dh,0
        mul dx ;ax = x * 40
        mov dx,ax
        mov rect_x_end,dx
        add rect_x_end,40d ;40d
        l22:
             push dx
            ;get color of existing pixels
            mov ah,0Dh
            mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel

            cmp al,0
            je skip_me
            cmp al,15d
            je skip_me

            mov ah,0ch  ;draw pixel
            mov al,color_rect
            int 10h

        skip_me:
        pop dx
        inc dx
        cmp dx,rect_x_end
        jne l22
    inc bx
    cmp bx,rect_y_end
    jne l11
endm draw_rectangle
;------------
draw_rectangle_not_trans macro x_rect,y_rect,color_rect
local l111,l222

    mov ax,20d
    mov bl,y_rect
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    mov rect_y_end,bx
    add rect_y_end,20d
    l111:
        mov ax,40d
        mov dl,x_rect
        mov dh,0
        mul dx ;ax = x * 40
        mov dx,ax
        mov rect_x_end,dx
        add rect_x_end,40d ;40d
        l222:
             push dx
            ;get color of existing pixels
            mov ah,0Dh
            mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel

            mov ah,0ch  ;draw pixel
            mov al,color_rect
            int 10h

        pop dx
        inc dx
        cmp dx,rect_x_end
        jne l222
    inc bx
    cmp bx,rect_y_end
    jne l111
  endm draw_rectangle_not_trans
;------------
get_0to64_from_xy MACRO x_07,y_07 ;to make u use [bx] bh = 0 ,result"bl" = from 0 to 64
    mov bl,8
    mov al,y_07
    mul bl;al=y*8
    add al,x_07
    mov bl,al   ;bl = from 0 to 64
    mov bh,0
endm get_0to64_from_xy
;------------
set_place_available MACRO x_place,y_place
    ;get_0to64_from_xy x_place,y_place
    mov bl,8
    mov al,y_place
    mul bl;al=y*8
    add al,x_place
    mov bl,al   ;bl = from 0 to 64
    mov bh,0
    mov available_places[bx],1
endm set_place_available
;------------
reset_available_places MACRO
local loop44
    mov cx,64
    mov bx,0
loop44:
    mov available_places[bx],0
    inc bx
loop loop44
endm reset_available_places
;------------
can_move_or_not MACRO x_move,y_move;al=0 if can't move if can move 1
local can_not_move
    mov bl,8
    mov al,y_move
    mul bl;al=y*8
    add al,x_move
    mov bl,al   ;bl = from 0 to 64
    mov bh,0

    mov al,0 ;set al to 0 "can not move"
    cmp available_places[bx],1
    jnz can_not_move
    mov al,1
can_not_move:
endm can_move_or_not
;------------
;bwlow is incorrect
move_piece macro x_move_new,y_move_new
local even_place,end_check
;old locations of piece = selected_piece_x,y
    mov al,selected_piece_x
    add al,selected_piece_y
    and al,1        ;if last bit is 1 then odd else even
    jz even_place   ;even
    mov al,1 ;odd
    jmp end_check
even_place:
    mov al,0 ;even
end_check:
;al=0 even draw color 1 in old position
; al =1 odd draw color 1 in old position
endm move_piece
;------------
time macro
mov ah,2ch
int 21h ;dh= current second
mov current_second,dh
endm time
;------------
update_time_of_all macro
local loop_time,max_time
    mov cx,64
    mov bx,0
loop_time:
    cmp time_array[bx],3
    je max_time
        inc time_array[bx]
    max_time: ;don't increment
    inc bx
loop loop_time
endm update_time_of_all
;------------
get_rectcolor_by_xy macro
    ;get row from 0-7 to 0-199
    mov ax,20d
    mov bl,y_rect_avilable
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    ;get column from 0-7 to 0-319
    mov ax,40d
    mov cl,x_rect_avilable
    mov ch,0
    mul cx  ; ax = x * 40
    mov cx,ax
            ;get color of existing pixels
            mov ah,0Dh
            mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel
endm get_rectcolor_by_xy
;------------
white_or_blak_piece macro piecee_type;piece_color = 'w' or 'b' or '0'
    local not_whitee,not_zeroo,end_white_or_blak_piece
    cmp piecee_type,'a'
    jb not_whitee
    mov piece_color,'w';white
    jmp end_white_or_blak_piece
    not_whitee:

    cmp piecee_type,'0'
    jne not_zeroo
    mov piece_color,'0'
    jmp end_white_or_blak_piece
    not_zeroo:

    mov piece_color,'b';black

end_white_or_blak_piece:
endm white_or_blak_piece
;------------
.model small
.stack 64
.data

;some constant variables for the game
  start    dw 0    ;position of the starting point(pixel)
  w       dw 40   ;width of the square
  len     dw 20   ; length (height) of each row of squares
  ;count   dw 0    ; dummy maloosh lazma XD
  color1  db 04d  ; primary color of the board
  color2  db 2d  ; secondary color
  c db ?
  no_rows db 8    ; number of rows to be drawn
  no_sqs db 8
  ;------------------end of Background vars
;-------navigation
  sel_color db 0ch ;color of the Navigateing square
  continue_counter db 1
  global_cursor db 0; 0-63
  sq_cursor_h db 4; horizontal initialized position
  sq_cursor_v db 0; vertical initialized position
  step_size_row db 40; to traverse in a row
  step_size_col dw 6400d; to traverse in a column
  direction db 0
  key db ? ;key pressed for logic
  ;----------navigation 2
  sel_color2 db 0bh ;color of the Navigateing square
  continue_counter2 db 1
  global_cursor2 db 0; 0-63
  sq_cursor_h2 db 4; horizontal initialized position
  sq_cursor_v2 db 7; vertical initialized position
  direction2 db 0
  key2 db ? ;key pressed for logic
  ;one var in move piece also 
square_info LABEL BYTE
    ;first row
    db 6 ;sq_0  piece on it
    db 6 ;sq_1
    db 0
    db 0
    ;second row
    db 0
    db 0
    db 0
;--------------- draw_rect_trans macro variables
    sq_background db ?;;;;;;;;;;;;;;;;;;;;
    w_counter db ?
    l_counter db ?
;-------------------pieces--------------
;king ,wazer ,tabia , horse ,soldier ,fel
    piece_x_end dw ?
    piece_y_end dw ?
    piece_background db ?
;-------------draw_rectangle----------;
    rect_x_end dw ?
    rect_y_end dw ?
    old_color db ?
;--------ckeck selected piece---------;
 selected_piece_x db 0 ;selected piece x i want to move
 selected_piece_y db 0
 selected_piece_position db ? ;selected piece
 selected_pos_color db 7
 selected_piece_type db ? ;type of piece
 desired_position db ?
 selected_piece_color db ? ;color of piece
;------------move piece---------------;
 x_new db 0
 y_new db 0
 current_x db 0
 current_y db 0
 color_avilable_moves db 55
 current_color db 04;color 1  for navigation ;initializet square color of selector
 ;-------move piece 2
  x_new2 db 0
  y_new2 db 0
  current_x2 db 0
  current_y2 db 0
  color_avilable_moves2 db 55
  current_color2 db 02;color 1  for navigation ;initializet square color of selector
;------------get_rectcolor_by_xy------;
 x_rect_avilable db 0
 y_rect_avilable db 0
;------------timer-----------;
 current_second db 0
 time_array db 64 dup(3);all can move initially
;------------available_places-----------;
 available_places db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
;-------------white pieces--------------;
 soldier db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;--------------------
  horse db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,15,15,15,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,8,7,15,15,15,15,15,15,15,15,15,15,15,15,7,8,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;------------
  ;-------------
  king db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,7,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,31,31,43,44,30,30,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,45,46,15,15,47,45,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,30,41,15,15,15,39,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,42,46,15,15,15,45,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,45,47,15,15,15,47,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,25,39,15,15,15,36,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,15,15,15,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,15,15,15,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,15,15,15,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,19,37,15,15,15,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,33,42,15,15,15,38,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,46,47,15,15,15,45,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,47,15,15,15,15,47,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,28,43,15,15,15,15,15,15,42,213,19,17,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,18,34,47,15,15,15,15,15,15,15,15,46,46,29,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,18,213,7,15,15,15,15,15,15,15,15,15,15,15,33,17,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,17,20,30,7,41,41,41,41,41,41,42,42,7,35,25,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,20,21,21,21,21,21,21,21,21,20,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;-----------
  wazer db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;----------
  fel db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;--------
  tabia db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,8,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;------------black pieces------------;
  b_king db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;----------
  b_wazer db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,8,0,0,8,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;-----------
  b_fel db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;---------------
  b_horse db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,7,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,8,8,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;--------------
  b_tabia db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,15,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,8,8,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;-------------
  b_soldier db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,8,8,8,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;-----------


;---------array which piece in the square-----;
 ;small letters are white pieces and big letters are black pieces
 squares_container db "thfwkfht"
 db 8 dup('s')
 db 8 dup('0')
 db 8 dup('0')
 db 8 dup('0')
 db 8 dup('0')
 db 8 dup('S')
 db "THFWKFHT"
;-------------check piece_type macro-----------;
 piece_color db ?;to store the piece type
;--------------part1-------------------------;
  string1 db "To start chatting press F1",'$'
  string2 db "To start the game press F2",'$'
  string3 db "To end the game press ESC",'$'

 nw_line DB 10,13,"$" 

 MSG1 DB 10,13,"Please Enter Your Name:$" 
 MSG2 DB 10,13,"Initial Points:$"
 MSG3 DB 10,13,"Press Enter Key to Continue$" 
 
 MSG4 DB 10,13,"Invalid UserName$"
 
 MSG6 DB 10,13,"Please Press Enter Key to try again$" 

 User1_Name DB 16,?,16 DUP('$');max user name size = 15 
 User2_Name DB 16,?,16 DUP('$');max user name size = 15  

 lower_initial_point db ?;max initial point is 99 deciamls (i.e less 8 bits)

 key1_pressed db 2;0 pleaaase   ;to store the key pressed in part1
;-------------------------------------------------

.code
main proc far
    mov ax,@data
    mov ds,ax
;-------part1-----------------;
           ;clearScrean
           ;changetotxt

           ;call Users_screen
           ;call second

           ;mov key1_pressed,al;from part1
;-----------------------------;
    ;initialization
        cmp key1_pressed,2 ;if F2 is pressed enter game
        je don_not_jump
        jmp skip_game
        don_not_jump:

        mov ax,0A000h
        mov es,ax

        mov ah,0
        mov al,13h
        int 10h

    mov di,0

    mov no_sqs,8
    call draw_board

    call initialize_pieces

    mov di,160        ;where you want to initialize this selector
    draw_rect_trans sel_color

    mov di,44960d        ;where you want to initialize this selector
    draw_rect_trans sel_color2

    time ;set current_second
continue_label:

    mov ah,2ch
    int 21h ;dh= current second
    cmp dh,current_second
    je same_second
    inc current_second ;second passed
    update_time_of_all
same_second:

    ;wait for user input
  CHECK_ifkeypressed:
    mov ah,1
    int 16h;0 if no key pressed
    jnz key_pressed
    mov key,'0';set key to 0
                jmp continue_label;        remove me if error
  key_pressed:
    mov ah,0 ;consume buffer
    int 16h ;w=up,s=down,a=left,d=right
    mov key,al


    call Navigate
    call Navigate2
    call ckeck_selected
    ;call ckeck wineer;mov winner 0;1;2
;main loop of game,not to end game
cmp continue_counter,0
jnz continue_label
;--------------------------end of game---------------------;
someone_wins:

skip_game:
;just for dosbox
    mov       ah, 4ch
    mov       al, 01h
    int       21h

    hlt
main endp
;-----------------
initialize_pieces proc
    ;draw all pieces using draw_piece x,y
    ;draw white pieces
    draw_piece tabia,0,0
    draw_piece horse,1,0
    draw_piece fel,2,0
    draw_piece wazer,3,0
    draw_piece king,4,0
    draw_piece fel,5,0
    draw_piece horse,6,0
    draw_piece tabia,7,0
    draw_piece soldier,0,1
    draw_piece soldier,1,1
    draw_piece soldier,2,1
    draw_piece soldier,3,1
    draw_piece soldier,4,1
    draw_piece soldier,5,1
    draw_piece soldier,6,1
    draw_piece soldier,7,1

    ;draw black pieces
    draw_piece b_tabia,0,7
    draw_piece b_horse,1,7
    draw_piece b_fel,2,7
    draw_piece b_wazer,3,7
    draw_piece b_king,4,7
    draw_piece b_fel,5,7
    draw_piece b_horse,6,7
    draw_piece b_tabia,7,7
    draw_piece b_soldier,0,6
    draw_piece b_soldier,1,6
    draw_piece b_soldier,2,6
    draw_piece b_soldier,3,6
    draw_piece b_soldier,4,6
    draw_piece b_soldier,5,6
    draw_piece b_soldier,6,6
    draw_piece b_soldier,7,6
ret
initialize_pieces endp
;-----------------
draw_board proc
    row_l1:
    push di
    draw_rect color1
    pop di
    add di,40
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    dec no_sqs
    jnz row_l1
    mov no_sqs,8
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    add start,6400
    mov di,start
    dec no_rows
    jnz row_l1 

    
    ret
draw_board endp
;-----------------
draw_board2 proc

mov start,0
mov no_rows,8
mov no_sqs,8
    row_l11:
    push di
    draw_rect_trans color1
    pop di
    add di,40
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    dec no_sqs
    jnz row_l11
    mov no_sqs,8
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    add start,6400
    mov di,start
    dec no_rows
    jnz row_l11 

    
    ret
draw_board2 endp
;-----------------
ckeck_selected proc
;hi man
    cmp key,'q'
    je xcx
    jmp notq
    xcx:

    mov al,sq_cursor_h
    mov selected_piece_x,al
    mov al,sq_cursor_v
    mov selected_piece_y,al

    mov bl,8
    mov al,selected_piece_y
    mul bl;al=y*8
    add al,selected_piece_x
    mov selected_piece_position,al
        draw_rectangle selected_piece_x,selected_piece_y,selected_pos_color

        mov al,selected_piece_x
        mov current_x,al
        mov al,selected_piece_y
        mov current_y,al

    mov bl,selected_piece_position
    mov bh,0
    mov cl,squares_container[bx]
    mov selected_piece_type,cl
        ;call wazerr,horsee,feeel,kingg 7sb ay piece selected;;;;;;;;;;;;;;;;;;
    ;check which type of piece is selected
        cmp selected_piece_type,'t'
        jne not_tabiaa2
            call tabiaa
        not_tabiaa2:
        cmp selected_piece_type,'h'
        jne not_horse2
            call horsee
        not_horse2:
        cmp selected_piece_type,'f'
        jne not_fel2
            call feeel
        not_fel2:
        cmp selected_piece_type,'w'
        jne not_wazer2
            call wazerr
        not_wazer2:
        cmp selected_piece_type,'k'
        jne not_king2
            call kingg
        not_king2:
        cmp selected_piece_type,'s'
        jne not_soldier2
            call soldierr
        not_soldier2:
        ;------------
        cmp selected_piece_type,'T'
        jne not_b_tabiaa2
            call tabiaa
        not_b_tabiaa2:
        cmp selected_piece_type,'H'
        jne not_b_horse2
            call horsee
        not_b_horse2:
        cmp selected_piece_type,'F'
        jne not_b_fel2
            call feeel
        not_b_fel2:
        cmp selected_piece_type,'W'
        jne not_b_wazer2
            call wazerr
        not_b_wazer2:
        cmp selected_piece_type,'K'
        jne not_b_king2
            call kingg
        not_b_king2:
        cmp selected_piece_type,'S'
        jne not_b_soldier2
            call soldierr_b
        not_b_soldier2:
    ;------------
notq:
    ;check if want to move "m key pressed"
    cmp key,'m'
    je xcxpp
    jmp notm
    xcxpp:;key is m check if can move to new position
;check if can move "time passed from last move > 3 seconds"
    mov bl,selected_piece_position
    mov bh,0
    mov cl,time_array[bx]
    cmp cl,3
    ;JB _3seconds_not_passed;don't move or do any thing
    ;JAE vvv
    je vvv
    jmp _3seconds_not_passed
    vvv:

    can_move_or_not sq_cursor_h,sq_cursor_v  ;al=1 if can move
    cmp al,1
    ;jne can_not_movee ;0 can't move
    je can_moveee
    jmp can_not_movee;not equal 1 don't move
can_moveee:
    reset_available_places
    ;know which piece to draw
    ;mov selected_piece_type,squares_container[selected_piece_position]
    mov bl,selected_piece_position
    mov bh,0
    mov cl,squares_container[bx]
    mov selected_piece_type,cl

    ;check if it is white or black------------------------------------
    mov bl,8
    mov al,sq_cursor_v
    mul bl;al=y*8
    add al,sq_cursor_h
    mov desired_position,al

;------CHECK WHITE OR BLACK TO PREVENT DRAW ON HIS PIECES---------
    mov bl,desired_position
    mov bh,0
    cmp selected_piece_type,'a'
    jae check_w ;want to move white piece
    cmp selected_piece_type,'Z'
    jbe check_b ;want to move black piece

    check_w: ;check if white piece exist in desired position
    cmp squares_container[bx],'a'
    jae can_not_movee11
    jmp continue_moving

    can_not_movee11:
    ; ;reset board to un highlighted if me want wrong move
    push di
    mov di,0
    call draw_board2
    pop di

    ret ;exit from ckeck_selected

    check_b:
    cmp squares_container[bx],'Z'
    ja  continue_moving
    cmp squares_container[bx],'0'
    jnz can_not_movee11
    jmp continue_moving
    continue_moving:

;-------------------------------------------------------
    ;move piece to new position
;update time_array of new place set it to 0
    mov bl,desired_position
    mov bh,0
    mov time_array[bx],0

    mov bl,selected_piece_position;old position timer reset to 3 to enable moves in it
    mov bh,0
    mov time_array[bx],3

    ;call move_piece
    check_square_color sq_cursor_h,sq_cursor_v ;al=0 if color1
    cmp al,0
    ;jne color_is_2 ;1 if color2
    je color_is_1
    jmp color_is_2
color_is_1:
    ;color is 1
    draw_rectangle_not_trans selected_piece_x,selected_piece_y,color1
    ;draw_piece horse,sq_cursor_h,sq_cursor_v
    call draw_piece_by_type
;update squares_container---
    mov bh,0
    mov bl,desired_position
    mov si,bx                       ;si = desired_position
    mov bl,selected_piece_position ;bx = selected_piece_position

    mov squares_container[bx],'0'
    mov al,selected_piece_type
    mov squares_container[si],al
;------------------------s
    ;desired_position,selected_piece_position
    ;reset board to un highlighted
    push di
    mov di,0
    call draw_board2
    pop di
    
    jmp color_is_1_and_drawn
color_is_2:
    draw_rectangle_not_trans selected_piece_x,selected_piece_y,color2
    ;draw_piece horse,sq_cursor_h,sq_cursor_v
    call draw_piece_by_type
;update squares_container---
    mov bh,0
    mov bl,desired_position
    mov si,bx                       ;si = desired_position
    mov bl,selected_piece_position ;bx = selected_piece_position

    mov squares_container[bx],'0'
    mov al,selected_piece_type
    mov squares_container[si],al
;------
    ;reset board to un highlighted
    push di
    mov di,0
    call draw_board2
    pop di

color_is_1_and_drawn:
can_not_movee:
_3seconds_not_passed:
    ;reset board to un highlighted if me want wrong move
    push di
    mov di,0
    call draw_board2
    pop di
notm:
    draw_rectangle sq_cursor_h,sq_cursor_v,sel_color
    draw_rectangle sq_cursor_h2,sq_cursor_v2,sel_color2

ret
ckeck_selected endp
;-----------------
;current_color db 04 ;you'll need to add this var
Navigate proc

    ;wait for user input

        ;   CHECK_ifkeypressed:
        ;     mov ah,1
        ;     int 16h;0 if no key pressed
        ;     jnz key_pressed
        ;     mov key,'0';set key to 0
        ;     ret
        ;   key_pressed:
        ;     mov ah,0 ;consume buffer
        ;     int 16h ;w=up,s=down,a=left,d=right
        ;     mov key,al

    ;if al == ascii of any of these letters
    ;it should do a distinct reaction
    ;al == d (right)
    mov al,key
    cmp al,'d';;read ascii of 'd' from al
    jz cond_go_right
    cmp al,'a'
    jz cond_go_left
    cmp al,'w'
    jz cond_go_up
    cmp al,'s'
    jz cond_l_go_down

    exitt: ret
    ;-----------------------------------

    cond_go_right:
    mov direction,1
    cmp sq_cursor_h,7;check if cursor is at the end of the row
    jz exitt
    jmp start_nav

    cond_go_left:
    mov direction,2
    cmp sq_cursor_h,0
    jz exitt
    jmp start_nav

    cond_go_up:
    mov direction,3
    cmp sq_cursor_v,0
    jz exitt
    jmp start_nav

    cond_l_go_down:
    mov direction,4
    cmp sq_cursor_v,7
    jz exitt
    jmp start_nav


    start_nav:
    push ax

    mov ax,0
    mov cx,0;;;;;;
    mov al,sq_cursor_h
    mul step_size_row ;ax = sq_cursor_h * step_size_row"40"
    mov di,ax
    mov cl,al;;;;;

    mov ax,0
    mov al,sq_cursor_v
    mul step_size_col;ax = sq_cursor_v * step_size_col"6400"
    add di,ax
    add cl,al
    
    
            
    push di
    draw_rect_trans current_color
    ; mov al,color1
    ; mov bl,color2
    ; xchg al,bl
    ; mov color1,al
    ; mov color2,bl
    pop di


    pop ax
    cmp direction,1;;read ascii of 'd' from al
    jz go_right
    cmp direction,2
    jz go_left
    cmp direction,3
    jnz skip12 
    jmp go_up
    skip12:
    cmp direction,4
    jz l_go_down
    ;;;;;;;;;;;;;;;;;;;;;;
    go_right:
    cmp sq_cursor_h,7
    jz jump

    inc global_cursor

    inc sq_cursor_h

    call get_current_color
    ;call this_sq_must_be_col1_or2

    add di,40d;next columnin same row
    push di
    draw_rect_trans sel_color
    pop di
    jump:jmp end_nav
    l_go_down: jmp go_down
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    go_left:
    cmp sq_cursor_h,0
    jz jump
    dec global_cursor

    dec sq_cursor_h
    call get_current_color
    sub di,40d
    push di
    draw_rect_trans sel_color
    pop di
    jmp end_nav
    ;;;;;;;;;;;;;;;;;;;;;;;;
    go_up:
    cmp sq_cursor_v,0
    jz jump

    sub global_cursor,8
    dec sq_cursor_v
    call get_current_color
    sub di,6400d
    push di
    draw_rect_trans sel_color
    pop di
    jmp end_nav
    ;;;;;;;;;;;;;;;;;;;;;;;;
    go_down:
    cmp sq_cursor_v,7
    jz end_nav

    add global_cursor,8

    inc sq_cursor_v
    call get_current_color
    add di,6400d
    push di
    draw_rect_trans sel_color
    pop di
    end_nav:
    ret
Navigate endp
;-----------------
get_current_color proc
 ;get row from 0-7 to 0-199
    ;mov bx,global_cursor
    ;cmp available_places[bx]

    mov ax,20d
    mov bl,sq_cursor_v
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    ;get column from 0-7 to 0-319
    mov ax,40d
    mov cl,sq_cursor_h
    mov ch,0
    mul cx  ; ax = x * 40
    mov cx,ax
            ;get color of existing pixels
            mov ah,0Dh
            ;mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel
            mov current_color,al
            ret
get_current_color endp
;-----------------
get_current_color2 proc
 ;get row from 0-7 to 0-199
    mov ax,20d
    mov bl,sq_cursor_v2
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    ;get column from 0-7 to 0-319
    mov ax,40d
    mov cl,sq_cursor_h2
    mov ch,0
    mul cx  ; ax = x * 40
    mov cx,ax
            ;get color of existing pixels
            mov ah,0Dh
            ;mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel
            mov current_color2,al
            ret
get_current_color2 endp
;-----------------
wazerr proc
    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l12:
        inc x_new
        inc y_new
        cmp x_new,8
        jne wazerr_cont00
        jmp exit12
        wazerr_cont00:
        cmp y_new,8
        jne wazerr_cont0
        jmp exit12
        wazerr_cont0:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit12
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
            
            cmp piece_color,'b'
            je exit12
    jmp l12
exit12:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l13:
        dec x_new
        dec y_new
        cmp x_new,-1
        jne wazerr_cont11
        jmp exit13
        wazerr_cont11:
        cmp y_new,-1
        jne wazerr_cont1
        jmp exit13
        wazerr_cont1:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit13
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
            
            cmp piece_color,'b'
            je exit13
    jmp l13
exit13:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l14:
        inc x_new
        dec y_new
        cmp x_new,8
        jne wazerr_cont22
        jmp exit14
        wazerr_cont22:
        cmp y_new,-1
        jne wazerr_cont2
        jmp exit14
        wazerr_cont2:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit14
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    
            cmp piece_color,'b'
            je exit14
    jmp l14
exit14:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l15:
        dec x_new
        inc y_new
        cmp x_new,-1
        jne wazerr_cont33
        jmp exit15
        wazerr_cont33:
        cmp y_new,8
        jne wazerr_cont3
        jmp exit15
        wazerr_cont3:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit15
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    
            cmp piece_color,'b'
            je exit15
    jmp l15
exit15:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l16:
        inc x_new
        cmp x_new,8
        jne wazerr_cont4
        jmp exit16
        wazerr_cont4:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit16
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    
            cmp piece_color,'b'
            je exit16
    jmp l16
exit16:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l17:
        dec x_new
        cmp x_new,-1
        jne wazerr_cont5
        jmp exit17
        wazerr_cont5:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit17
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    
            cmp piece_color,'b'
            je exit17
    jmp l17
exit17:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l18:
        inc y_new
        cmp y_new,8
        jne wazerr_cont6
        jmp exit18
        wazerr_cont6:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit18
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    
            cmp piece_color,'b'
            je exit18
    jmp l18
exit18:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l19:
        dec y_new
        cmp y_new,-1
        jne wazerr_cont7
        jmp exit19
        wazerr_cont7:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit19
                  set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    
            cmp piece_color,'b'
            je exit19
    jmp l19
exit19:

ret
wazerr endp
;-----------------
horsee proc
    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        inc y_new
        cmp y_new,8
        jne h11
        jmp exit20
        h11:
        inc y_new
        cmp x_new,8
        jne h12
        jmp exit20
        h12:
        cmp y_new,8
        jne h_cont0
        jmp exit20
        h_cont0:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit20
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit20:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        dec y_new
        cmp y_new,-1
        jne h21
        jmp exit21
        h21:
        dec y_new
        cmp x_new,-1
        jne h22
        jmp exit21
        h22:
        cmp y_new,-1
        jne h_cont1
        jmp exit21
        h_cont1:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit21
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit21:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        dec y_new
        cmp y_new,-1
        jne h31
        jmp exit22
        h31:
        dec y_new
        cmp x_new,8
        jne h32
        jmp exit22
        h32:
        cmp y_new,-1
        jne h_cont2
        jmp exit22
        h_cont2:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit22
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit22:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        inc y_new
        cmp y_new,8
        jne h41
        jmp exit23
        h41:
        inc y_new
        cmp x_new,-1
        jne h42
        jmp exit23
        h42:
        cmp y_new,8
        jne h_cont3
        jmp exit23
        h_cont3:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit23
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit23:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        cmp x_new,8
        jne h51
        jmp exit24
        h51:
        inc x_new
        inc y_new
        cmp x_new,8
        jne h52
        jmp exit24
        h52:
        cmp y_new,8
        jne h_cont4
        jmp exit24
        h_cont4:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit24
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit24:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        cmp x_new,-1
        jne h61
        jmp exit25
        h61:
        dec x_new
        inc y_new
        cmp x_new,-1
        jne h62
        jmp exit25
        h62:
        cmp y_new,8
        jne h_cont5
        jmp exit25
        h_cont5:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit25
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit25:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        cmp x_new,-1
        jne h71
        jmp exit2color_avilable_moves
        h71:
        dec x_new
        dec y_new
        cmp x_new,-1
        jne h72
        jmp exit2color_avilable_moves
        h72:
        cmp y_new,-1
        jne h_cont6
        jmp exit2color_avilable_moves
        h_cont6:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit2color_avilable_moves
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit2color_avilable_moves:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        cmp x_new,8
        jne h81
        jmp exit26
        h81:
        inc x_new
        dec y_new
        cmp x_new,8
        jne h82
        jmp exit26
        h82:
        cmp y_new,-1
        jne h_cont7
        jmp exit26
        h_cont7:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit26
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit26:

ret
horsee endp
;-----------------
feeel proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l1:
        inc x_new
        inc y_new
        cmp x_new,8
        jne f00
        jmp exit1
        f00:
        cmp y_new,8
        ;jne f1
        jne h232
        jmp exit1
        h232:


        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit1

          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
            cmp piece_color,'b'
            je exit1
    jmp l1
exit1:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l2:
        dec x_new
        inc y_new
        cmp x_new,-1
        ;je exit2
        jne f2e
        jmp exit2
        f2e:
        cmp y_new,8
        ;je exit2
        jne f2q
        jmp exit2
        f2q:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit2

          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
            cmp piece_color,'b'
            je exit2
    jmp l2
exit2:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l3:
        dec x_new
        dec y_new
        cmp x_new,-1
        jne f2e2
        jmp exit3
        f2e2:
        cmp y_new,-1
        jne f2q2
        jmp exit3
        f2q2:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit3

          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
            cmp piece_color,'b'
            je exit3
    jmp l3
exit3:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l4:
        inc x_new
        dec y_new
        cmp x_new,8
        jne f2e3
        jmp exit4
        f2e3:
        cmp y_new,-1
        jne f2q3
        jmp exit4

        f2q3:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit4

          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
            cmp piece_color,'b'
            je exit4
    jmp l4
exit4:

ret
feeel endp
;-----------------
kingg proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc x_new
    cmp x_new,8
    jne king_cont0
    jmp next1
    king_cont0:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next1
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next1:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec x_new
    cmp x_new,-1
    jne king_cont1
    jmp next2
    king_cont1:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next2
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next2:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc y_new
    cmp y_new,8
    jne king_cont2
    jmp next3
    king_cont2:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next3
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next3:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec y_new
    cmp y_new,-1
    jne king_cont3
    jmp next4
    king_cont3:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next4
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next4:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc x_new
    inc y_new
    cmp x_new,8
    jne kint_cont44
    jmp next5
    kint_cont44:
    cmp y_new,8
    jne king_cont4
    jmp next5
    king_cont4:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next5
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next5:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec x_new
    inc y_new
    cmp x_new,-1
    jne king_cont55
    jmp next6
    king_cont55:
    cmp y_new,8
    jne king_cont5
    jmp next6
    king_cont5:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next6
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next6:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec x_new
    dec y_new
    cmp x_new,-1
    jne king_cont66
    jmp next7
    king_cont66:
    cmp y_new,-1
    jne king_cont6
    jmp next7
    king_cont6:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next7
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next7:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc x_new
    dec y_new
    cmp x_new,8
    jne king_cont77
    jmp next8
    king_cont77:
    cmp y_new,-1
    jne king_cont7
    jmp next8
    king_cont7:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next8
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next8:
ret
kingg endp
;-----------------
tabiaa proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l166:
        inc x_new
        cmp x_new,8
        jne tab_cont0
        jmp exit166
        tab_cont0:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit166
                set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
            
            cmp piece_color,'b'
            je exit166
    jmp l166
exit166:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l266:
        dec x_new
        cmp x_new,-1
        jne tab_cont1
        jmp exit266
        tab_cont1:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit266
                        set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
      
            cmp piece_color,'b'
            je exit266
    jmp l266
exit266:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l366:
        inc y_new
        cmp y_new,8
        jne tab_cont2
        jmp exit366
        tab_cont2:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit366
                        set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
      
            cmp piece_color,'b'
            je exit366
    jmp l366
exit366:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l466:
        dec y_new
        cmp y_new,-1
        jne tab_cont3
        jmp exit466
        tab_cont3:
        get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je exit466
                        set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
      
            cmp piece_color,'b'
            je exit466
    jmp l466
exit466:

ret
tabiaa endp
;-----------------
soldierr proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc y_new
    cmp y_new,8
    jne sold_cont
    jmp next144
    sold_cont:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next144
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
next144:

ret
soldierr endp
;-----------------
soldierr_b proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec y_new
    cmp y_new,-1
    jne b_sold_cont
    jmp next1445
    b_sold_cont:
    get_0to64_from_xy x_new,y_new ;bl=0to64
        white_or_blak_piece squares_container[bx]
        cmp piece_color,'w'
        je next1445
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
next1445:

ret
soldierr_b endp
;-----------------
draw_piece_by_type proc
;check type of piece
    cmp selected_piece_type,'t'
    jne not_tabiaa
        mov si,offset tabia
    not_tabiaa:
    cmp selected_piece_type,'h'
    jne not_horse
        mov si,offset horse
    not_horse:
    cmp selected_piece_type,'f'
    jne not_fel
        mov si,offset fel
    not_fel:
    cmp selected_piece_type,'w'
    jne not_wazer
        mov si,offset wazer
    not_wazer:
    cmp selected_piece_type,'k'
    jne not_king
        mov si,offset king
    not_king:
    cmp selected_piece_type,'s'
    jne not_soldier
        mov si,offset soldier
    not_soldier:
    ;------------
    cmp selected_piece_type,'T'
    jne not_b_tabiaa
        mov si,offset b_tabia
    not_b_tabiaa:
    cmp selected_piece_type,'H'
    jne not_b_horse
        mov si,offset b_horse
    not_b_horse:
    cmp selected_piece_type,'F'
    jne not_b_fel
        mov si,offset b_fel
    not_b_fel:
    cmp selected_piece_type,'W'
    jne not_b_wazer
        mov si,offset b_wazer
    not_b_wazer:
    cmp selected_piece_type,'K'
    jne not_b_king
        mov si,offset b_king
    not_b_king:
    cmp selected_piece_type,'S'
    jne not_b_soldier
        mov si,offset b_soldier
    not_b_soldier:



mov al,[si]           ;just for storing the piecebackground in piece_background by first pixel
mov piece_background,al;to know background color of piece
mov ax,20d
mov bl,sq_cursor_v
mov bh,0
mul bx  ; ax = y * 20
mov bx,ax
mov piece_y_end,bx
add piece_y_end,20d
l167:
    mov al,sq_cursor_h
    mov ah,0
    mov di,ax
    mov ax,40d
    mul di ;ax = x * 40
    mov di,ax
    mov piece_x_end,di
    add piece_x_end,40d ;40d
    l267:
            mov cx,di;column

            mov dx,bx;row
            mov ax,[si]
            mov ah,0ch  ;draw pixel
            cmp piece_background,al
            je skip_draww
            int 10h
        skip_draww:

            inc si

      inc di
      cmp di,piece_x_end
      jne l267
inc bx
cmp bx,piece_y_end
jne l167

ret
draw_piece_by_type endp
;-----------------
;----part1--------
Users_screen   PROC  
                
                  ;username_interface:player 1st palyer
                  
                   username_interface User1_Name       ;/\/\/\/\/\/\/\
                  
                    
        press_enter2: 
        
        mov ah,07
        int 21h;Read one char putting @ al without echo 
                        
        cmp al,0Dh;enter key=> from ascii code table 
        jz user2_inter
        display_new_line
        display_Message MSG3  
        jmp press_enter2   
                     
                     
                   
        user2_inter: 
          
        mov ax,0600h
        mov bh,07 
        mov cx,0 
        mov dx,184FH
        int 10h 
        set_cursor_at_middle  
                       
                       
                       
                       
                        ;username interface:player 2   
                         username_interface User2_Name ;/\/\/\/\/\/\/\
                   
                   
                   pop ax; ax=user#2 ==> initial point
                   pop bx; ax=user#1 ==> initial point    
                   
                   cmp ax,bx
                   jnc choose_user1_IP;no carry=bx is lower& ax reg is bigger
   
                   mov dx,ax
                   jmp push_result 
                   
   choose_user1_IP: mov dx,bx   
  
   push_result:     
                   mov lower_initial_point,dl;max initial_point was assumed 99 deciamls
                    
;-------------------------    
                    
ret    

Users_screen                   ENDP  
;-----------------
second proc 

       changetograph

       setCursor     8d,5d
       displayString string1
       setCursor     8d,7d
       displayString string2
       setCursor     8d,9d
       displayString string3


       mov           ax, 1003h
       mov           bx, 0      ; disable blinking.
       int           10h
       drawHLine     150d

       setCursor     0d,19d
 

  A:   
       getKey
       checkKey
       cmp           al,0
       jz            A


    
ret
       
    
second endp
;-----------------
Navigate2 proc

    ;wait for user input
        ;   CHECK_ifkeypressed2:
        ;     mov ah,1
        ;     int 16h;0 if no key pressed
        ;     jnz key_pressed2
        ;     mov key2,'0';set key to 0
        ;     ret
        ;   key_pressed2:
        ;     mov ah,0 ;consume buffer
        ;     int 16h ;w=up,s=down,a=left,d=right
        ;     mov key2,al
    ;if al == ascii of any of these letters
    ;it should do a distinct reaction
    ;al == d (right)
    mov al,key
    cmp al,'h';;read ascii of 'd' from al
    jz cond_go_right22
    cmp al,'f'
    jz cond_go_left2
    cmp al,'t'
    jz cond_go_up2
    cmp al,'g'
    jz cond_l_go_down22

    exitt2: ret
    ;-----------------------------------

    cond_go_right22:
    mov direction2,1
    cmp sq_cursor_h2,7;check if cursor is at the end of the row
    jz exitt2
    jmp start_nav2

    cond_go_left2:
    mov direction2,2
    cmp sq_cursor_h2,0
    jz exitt2
    jmp start_nav2

    cond_go_up2:
    mov direction2,3
    cmp sq_cursor_v2,0
    jz exitt2
    jmp start_nav2

    cond_l_go_down22:
    mov direction2,4
    cmp sq_cursor_v2,7
    jz exitt2
    jmp start_nav2


    start_nav2:
    push ax

    mov ax,0
    mov cx,0;;;;;;
    mov al,sq_cursor_h2
    mul step_size_row ;ax = sq_cursor_h2 * step_size_row"40"
    mov di,ax
    mov cl,al;;;;;

    mov ax,0
    mov al,sq_cursor_v2
    mul step_size_col;ax = sq_cursor_v2 * step_size_col"6400"
    add di,ax
    add cl,al
    
    
            
    push di
    draw_rect_trans current_color2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; mov al,color1
    ; mov bl,color2
    ; xchg al,bl
    ; mov color1,al
    ; mov color2,bl
    pop di


    pop ax
    cmp direction2,1;;read ascii of 'd' from al
    jz go_right2
    cmp direction2,2
    jz go_left2
    cmp direction2,3
    jnz skip129
    jmp go_up2
    skip129:
    cmp direction2,4
    jz l_go_down2
    ;;;;;;;;;;;;;;;;;;;;;;
    go_right2:
    cmp sq_cursor_h2,7
    jz jump2

    inc global_cursor2

    inc sq_cursor_h2

    call get_current_color2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    add di,40d;next columnin same row
    push di
    draw_rect_trans sel_color2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    pop di
    jump2:jmp end_nav2
    l_go_down2: jmp go_down2
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    go_left2:
    cmp sq_cursor_h2,0
    jz jump2
    dec global_cursor2

    dec sq_cursor_h2
    call get_current_color2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    sub di,40d
    push di
    draw_rect_trans sel_color2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    pop di
    jmp end_nav2
    ;;;;;;;;;;;;;;;;;;;;;;;;
    go_up2:
    cmp sq_cursor_v2,0
    jz jump2

    sub global_cursor2,8
    dec sq_cursor_v2
    call get_current_color2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    sub di,6400d
    push di
    draw_rect_trans sel_color2 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    pop di
    jmp end_nav2
    ;;;;;;;;;;;;;;;;;;;;;;;;
    go_down2:
    cmp sq_cursor_v2,7
    jz end_nav2

    add global_cursor2,8

    inc sq_cursor_v2
    call get_current_color2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    add di,6400d
    push di
    draw_rect_trans sel_color2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    pop di
    end_nav2:
    ret
Navigate2 endp
;-----------------
this_sq_must_be_col1_or2 proc
        check_square_color sq_cursor_h,sq_cursor_v
        cmp al,0
        jne colr2
        mov bl,color1
        mov current_color,bl
        jmp end_col_check
    colr2:
        mov bl,color2
        mov current_color,bl
    end_col_check:
this_sq_must_be_col1_or2 endp
;-----------------
end main