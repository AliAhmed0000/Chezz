draw_rect MACRO color
local l1
    mov dx,di
    mov bh,20
    mov al,color
    l1: mov cx,40
        rep STOSB
        add dx,320
        mov di,dx
        dec BH
        jnz l1
endm draw_rect
;------------
draw_piece MACRO piece,x_piece,y_piece
local l1,l2,skip_draw

mov si,offset piece
mov al,piece           ;just for storing the piece in piece_background
mov piece_background,al;to know background color of piece
mov ax,20d
mov bl,y_piece
mov bh,0
mul bx  ; ax = y * 20
mov bx,ax
mov piece_y_end,bx
add piece_y_end,20d
l1:
    mov al,x_piece
    mov ah,0
    mov di,ax
    mov ax,40d
    mul di ;ax = x * 40
    mov di,ax
    mov piece_x_end,di
    add piece_x_end,40d ;40d
    l2:
            mov cx,di;column

            mov dx,bx;row
            mov ax,[si]
            mov ah,0ch  ;draw pixel
            cmp piece_background,al
            je skip_draw
            int 10h
        skip_draw:

            inc si

      inc di
      cmp di,piece_x_end
      jne l2
inc bx
cmp bx,piece_y_end
jne l1

endm draw_piece
;------------
draw_rect_trans MACRO color
    local l1,l2,l3,end
        mov dx,di
        mov bl,es:[di]
        mov w_counter,40
        mov l_counter,20
        mov al,color
        l1: cmp es:[di],bl
            jnz l2
            
            mov cx,1
            rep stosb
            
        l3: dec w_counter
            jnz l1
            mov w_counter,40
            add dx,320
            mov di,dx
            dec l_counter
            jnz l1
            jmp end
            
            l2: inc di
            jmp l3
      end:           
endm draw_rect_trans
;------------
;if row + column is even then background color1 (color of first square) else color2
check_square_color MACRO row,column ;if color1 then return al=0 else 1
local even_place,end_check
    mov al,row
    add al,column
    and al,1        ;if last bit is 1 then odd else even
    jz even_place   ;even
    mov al,1 ;odd
    jmp end_check
even_place:
    mov al,0 ;even
end_check:
endm check_square_color
;------------draw_rectangle don't draw on existing pixels
draw_rectangle macro x_rect,y_rect,color_rect
local l11,l22,skip_me

    mov ax,20d
    mov bl,y_rect
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    mov rect_y_end,bx
    add rect_y_end,20d
    l11:
        mov ax,40d
        mov dl,x_rect
        mov dh,0
        mul dx ;ax = x * 40
        mov dx,ax
        mov rect_x_end,dx
        add rect_x_end,40d ;40d
        l22:
             push dx
            ;get color of existing pixels
            mov ah,0Dh
            mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel

            cmp al,0
            je skip_me
            cmp al,15d
            je skip_me

            mov ah,0ch  ;draw pixel
            mov al,color_rect
            int 10h

        skip_me:
        pop dx
        inc dx
        cmp dx,rect_x_end
        jne l22
    inc bx
    cmp bx,rect_y_end
    jne l11
endm draw_rectangle
;------------
draw_rectangle_not_trans macro x_rect,y_rect,color_rect
local l111,l222

    mov ax,20d
    mov bl,y_rect
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    mov rect_y_end,bx
    add rect_y_end,20d
    l111:
        mov ax,40d
        mov dl,x_rect
        mov dh,0
        mul dx ;ax = x * 40
        mov dx,ax
        mov rect_x_end,dx
        add rect_x_end,40d ;40d
        l222:
             push dx
            ;get color of existing pixels
            mov ah,0Dh
            mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel

            mov ah,0ch  ;draw pixel
            mov al,color_rect
            int 10h

        pop dx
        inc dx
        cmp dx,rect_x_end
        jne l222
    inc bx
    cmp bx,rect_y_end
    jne l111
  endm draw_rectangle_not_trans
;------------
get_0to64_from_xy MACRO x_07,y_07 ; result"bl" = from 0 to 64
    mov bl,8
    mov al,y_07
    mul bl;al=y*8
    add al,x_07
    mov bl,al   ;bl = from 0 to 64
endm get_0to64_from_xy
;------------
set_place_available MACRO x_place,y_place
    ;get_0to64_from_xy x_place,y_place
    mov bl,8
    mov al,y_place
    mul bl;al=y*8
    add al,x_place
    mov bl,al   ;bl = from 0 to 64
    mov bh,0
    mov available_places[bx],1
endm set_place_available
;------------
reset_available_places MACRO
local loop44
    mov cx,64
    mov bx,0
loop44:
    mov available_places[bx],0
    inc bx
loop loop44
endm reset_available_places
;------------
can_move_or_not MACRO x_move,y_move;al=0 if can't move if can move 1
local can_not_move
    mov bl,8
    mov al,y_move
    mul bl;al=y*8
    add al,x_move
    mov bl,al   ;bl = from 0 to 64
    mov bh,0

    mov al,0 ;set al to 0 "can not move"
    cmp available_places[bx],1
    jnz can_not_move
    mov al,1
can_not_move:
endm can_move_or_not
;------------
;bwlow is incorrect
move_piece macro x_move_new,y_move_new
local even_place,end_check
;old locations of piece = selected_piece_x,y
    mov al,selected_piece_x
    add al,selected_piece_y
    and al,1        ;if last bit is 1 then odd else even
    jz even_place   ;even
    mov al,1 ;odd
    jmp end_check
even_place:
    mov al,0 ;even
end_check:
;al=0 even draw color 1 in old position
; al =1 odd draw color 1 in old position
endm move_piece
;------------
time macro
mov ah,2ch
int 21h ;dh= current second
endm time
;------------
get_rectcolor_by_xy macro
    ;get row from 0-7 to 0-199
    mov ax,20d
    mov bl,y_rect_avilable
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    ;get column from 0-7 to 0-319
    mov ax,40d
    mov cl,x_rect_avilable
    mov ch,0
    mul cx  ; ax = x * 40
    mov cx,ax
            ;get color of existing pixels
            mov ah,0Dh
            mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel
endm get_rectcolor_by_xy
;------------
.model small
.stack 64
.data

;some variables
  start    dw 0    ;position of the starting point(pixel)
  w       dw 40   ;width of the square
  len     dw 20   ; length (height) of each row of squares
  ;count   dw 0    ; dummy maloosh lazma XD
  color1  db 04h  ; primary color of the board
  color2  db 02h  ; secondary color
  c db ?
  no_rows db 8    ; number of rows to be drawn
  no_sqs db 8
  ;------------------end of Background vars
  sel_color db 0ch ;color of the Navigateing square
  continue_counter db 1
  global_cursor db 0; 0-63
  sq_cursor_h db 0; horizontal
  sq_cursor_v db 0; vertical
  step_size_row db 40; to traverse in a row
  step_size_col dw 6400d; to traverse in a column
  direction db 0
square_info LABEL BYTE
    ;first row
    db 6 ;sq_0  piece on it
    db 6 ;sq_1
    db 0
    db 0
    ;second row
    db 0
    db 0
    db 0
;--------------- draw_rect_trans macro variables
    sq_background db ?;;;;;;;;;;;;;;;;;;;;
    w_counter db ?
    l_counter db ?
;-------------------pieces--------------
;king ,wazer ,tabia , horse ,soldier ,fel
    piece_x_end dw ?
    piece_y_end dw ?
    piece_background db ?
;-------------draw_rectangle----------;
    rect_x_end dw ?
    rect_y_end dw ?
;--------ckeck selected piece---------;
 selected_piece_x db 0 ;selected piece x i want to move
 selected_piece_y db 0
 selected_piece_position db ? ;selected piece
 selected_pos_color db 7
 key db ? ;key pressed for logic
 selected_piece_type db ? ;type of piece
;------------move piece---------------;
 x_new db 0
 y_new db 0
 current_x db 0
 current_y db 0
 color_avilable_moves db 55
 current_color db 04;color 1  for navigation
;------------get_rectcolor_by_xy------;
 x_rect_avilable db 0
 y_rect_avilable db 0
;------------available_places-----------;
 available_places db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0
;-------------white pieces--------------;
 soldier db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;--------------------
  horse db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,15,15,15,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,8,7,15,15,15,15,15,15,15,15,15,15,15,15,7,8,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0;------------
  ;-------------
  king db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,7,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,31,31,43,44,30,30,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,45,46,15,15,47,45,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,30,41,15,15,15,39,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,42,46,15,15,15,45,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,45,47,15,15,15,47,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,25,39,15,15,15,36,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,15,15,15,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,15,15,15,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,15,15,15,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,19,37,15,15,15,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,33,42,15,15,15,38,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,46,47,15,15,15,45,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,47,15,15,15,15,47,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,28,43,15,15,15,15,15,15,42,213,19,17,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,18,34,47,15,15,15,15,15,15,15,15,46,46,29,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,18,213,7,15,15,15,15,15,15,15,15,15,15,15,33,17,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,17,20,30,7,41,41,41,41,41,41,42,42,7,35,25,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,20,21,21,21,21,21,21,21,21,20,18,17,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;-----------
  wazer db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;----------
  fel db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;--------
  tabia db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,8,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  ;------------black pieces------------;
  b_king db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,7,7,7,7,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;----------
  b_wazer db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,8,0,0,8,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;-----------
  b_fel db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;---------------
  b_horse db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,7,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,8,8,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;--------------
  b_tabia db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,15,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,8,8,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;-------------
  b_soldier db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,7,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  db 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,8,8,8,8,8,8,8,8,8,8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
  ;-----------


;---------array which piece in the square-----;
 ;small letters are white pieces and big letters are black pieces
 squares_container db "thfwkfht"
 db 8 dup('s')
 db 8 dup('0')
 db 8 dup('0')
 db 8 dup('0')
 db 8 dup('0')
 db 8 dup('S')
 db "THFWKFHT"


.code
main proc far
    mov ax,@data
    mov ds,ax

    mov ax,0A000h
    mov es,ax

    mov ah,0
    mov al,13h
    int 10h

    mov di,0

    mov no_sqs,8
    call draw_board

    call initialize_pieces

    mov di,0
    draw_rect_trans sel_color

continue_label:

    call Navigate
    call ckeck_selected

;main loop of game,not to end game
cmp continue_counter,0
jnz continue_label

;just for dosbox
    mov       ah, 4ch
    mov       al, 01h
    int       21h

    hlt
main endp
;-----------------
initialize_pieces proc
    ;draw all pieces using draw_piece x,y
    ;draw white pieces
    draw_piece tabia,0,0
    draw_piece horse,1,0
    draw_piece fel,2,0
    draw_piece wazer,3,0
    draw_piece king,4,0
    draw_piece fel,5,0
    draw_piece horse,6,0
    draw_piece tabia,7,0
    draw_piece soldier,0,1
    draw_piece soldier,1,1
    draw_piece soldier,2,1
    draw_piece soldier,3,1
    draw_piece soldier,4,1
    draw_piece soldier,5,1
    draw_piece soldier,6,1
    draw_piece soldier,7,1

    ;draw black pieces
    draw_piece b_tabia,0,7
    draw_piece b_horse,1,7
    draw_piece b_fel,2,7
    draw_piece b_wazer,3,7
    draw_piece b_king,4,7
    draw_piece b_fel,5,7
    draw_piece b_horse,6,7
    draw_piece b_tabia,7,7
    draw_piece b_soldier,0,6
    draw_piece b_soldier,1,6
    draw_piece b_soldier,2,6
    draw_piece b_soldier,3,6
    draw_piece b_soldier,4,6
    draw_piece b_soldier,5,6
    draw_piece b_soldier,6,6
    draw_piece b_soldier,7,6
ret
initialize_pieces endp
;-----------------
draw_board proc
    row_l1:
    push di
    draw_rect color1
    pop di
    add di,40
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    dec no_sqs
    jnz row_l1
    mov no_sqs,8
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    add start,6400
    mov di,start
    dec no_rows
    jnz row_l1 

    
    ret
draw_board endp
;-----------------
draw_board2 proc
mov start,0
mov no_rows,8
mov no_sqs,8
    row_l11:
    push di
    draw_rect_trans color1
    pop di
    add di,40
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    dec no_sqs
    jnz row_l11
    mov no_sqs,8
    mov al,color1
    mov bl,color2
    xchg al,bl
    mov color1,al
    mov color2,bl
    add start,6400
    mov di,start
    dec no_rows
    jnz row_l11 

    
    ret
draw_board2 endp
;-----------------
ckeck_selected proc
;hi man
    cmp key,'q'
    je xcx
    jmp notq
    xcx:

    mov al,sq_cursor_h
    mov selected_piece_x,al
    mov al,sq_cursor_v
    mov selected_piece_y,al

    mov bl,8
    mov al,selected_piece_y
    mul bl;al=y*8
    add al,selected_piece_x
    mov selected_piece_position,al
        draw_rectangle selected_piece_x,selected_piece_y,selected_pos_color

        mov al,selected_piece_x
        mov current_x,al
        mov al,selected_piece_y
        mov current_y,al

    mov bl,selected_piece_position
    mov bh,0
    mov cl,squares_container[bx]
    mov selected_piece_type,cl
        ;call wazerr,horsee,feeel,kingg 7sb ay piece selected;;;;;;;;;;;;;;;;;;
    ;check which type of piece is selected
        cmp selected_piece_type,'t'
        jne not_tabiaa2
            call tabiaa
        not_tabiaa2:
        cmp selected_piece_type,'h'
        jne not_horse2
            call horsee
        not_horse2:
        cmp selected_piece_type,'f'
        jne not_fel2
            call feeel
        not_fel2:
        cmp selected_piece_type,'w'
        jne not_wazer2
            call wazerr
        not_wazer2:
        cmp selected_piece_type,'k'
        jne not_king2
            call kingg
        not_king2:
        cmp selected_piece_type,'s'
        jne not_soldier2
            call soldierr
        not_soldier2:
        ;------------
        cmp selected_piece_type,'T'
        jne not_b_tabiaa2
            call tabiaa
        not_b_tabiaa2:
        cmp selected_piece_type,'H'
        jne not_b_horse2
            call horsee
        not_b_horse2:
        cmp selected_piece_type,'F'
        jne not_b_fel2
            call feeel
        not_b_fel2:
        cmp selected_piece_type,'W'
        jne not_b_wazer2
            call wazerr
        not_b_wazer2:
        cmp selected_piece_type,'K'
        jne not_b_king2
            call kingg
        not_b_king2:
        cmp selected_piece_type,'S'
        jne not_b_soldier2
            call soldierr_b
        not_b_soldier2:
    ;------------
notq:
    ;check if want to move "m key pressed"
    cmp key,'m'
    je xcxpp
    jmp notm
    xcxpp:;key is m check if can move to new position
    can_move_or_not sq_cursor_h,sq_cursor_v  ;al=1 if can move
    cmp al,1
    ;jne can_not_movee ;0 can't move
    je can_moveee
    jmp can_not_movee;not equal 1 don't move
can_moveee:
    reset_available_places;;;;;;;;;;;;;;;;;;;;;;
    ;know which piece to draw
    ;mov selected_piece_type,squares_container[selected_piece_position]
    mov bl,selected_piece_position
    mov bh,0
    mov cl,squares_container[bx]
    mov selected_piece_type,cl
    ;move piece to new position
    ;call move_piece
    check_square_color sq_cursor_h,sq_cursor_v ;al=0 if color1
    cmp al,0
    ;jne color_is_2 ;1 if color2
    je color_is_1
    jmp color_is_2
color_is_1:
    ;color is 1
    draw_rectangle_not_trans selected_piece_x,selected_piece_y,color1
    ;draw_piece horse,sq_cursor_h,sq_cursor_v
    call draw_piece_by_type

    ;reset board to un highlighted
    push di
    mov di,0
    call draw_board2
    pop di

    jmp color_is_1_and_drawn
color_is_2:
    draw_rectangle_not_trans selected_piece_x,selected_piece_y,color2
    ;draw_piece horse,sq_cursor_h,sq_cursor_v
    call draw_piece_by_type

    ;reset board to un highlighted
    push di
    mov di,0
    call draw_board2
    pop di

color_is_1_and_drawn:
can_not_movee:
    ;reset board to un highlighted if me want wrong move
    push di
    mov di,0
    call draw_board2
    pop di
notm:

ret
ckeck_selected endp
;-----------------
;current_color db 04 ;you'll need to add this var
Navigate proc
    ;wait for user input
  CHECK_ifkeypressed:
    mov ah,1
    int 16h;0 if no key pressed
    jnz key_pressed
    mov key,'0';set key to 0
    ret
  key_pressed:
    mov ah,0 ;consume buffer
    int 16h ;w=up,s=down,a=left,d=right
    mov key,al
    ;if al == ascii of any of these letters
    ;it should do a distinct reaction
    ;al == d (right)
    cmp al,'d';;read ascii of 'd' from al
    jz cond_go_right
    cmp al,'a'
    jz cond_go_left
    cmp al,'w'
    jz cond_go_up
    cmp al,'s'
    jz cond_l_go_down

    exitt: ret
    ;-----------------------------------
 
    cond_go_right:
    mov direction,1
    cmp sq_cursor_h,7;check if cursor is at the end of the row
    jz exitt
    jmp start_nav

    cond_go_left:
    mov direction,2
    cmp sq_cursor_h,0
    jz exitt
    jmp start_nav

    cond_go_up:
    mov direction,3
    cmp sq_cursor_v,0
    jz exitt
    jmp start_nav

    cond_l_go_down:
    mov direction,4
    cmp sq_cursor_v,7
    jz exitt
    jmp start_nav


    start_nav:
    push ax

    mov ax,0
    mov cx,0;;;;;;
    mov al,sq_cursor_h
    mul step_size_row ;ax = sq_cursor_h * step_size_row"40"
    mov di,ax
    mov cl,al;;;;;

    mov ax,0
    mov al,sq_cursor_v
    mul step_size_col;ax = sq_cursor_v * step_size_col"6400"
    add di,ax
    add cl,al
    
    
            
    push di
    draw_rect_trans current_color
    ; mov al,color1
    ; mov bl,color2
    ; xchg al,bl
    ; mov color1,al
    ; mov color2,bl
    pop di


    pop ax
    cmp direction,1;;read ascii of 'd' from al
    jz go_right
    cmp direction,2
    jz go_left
    cmp direction,3
    jnz skip12 
    jmp go_up
    skip12:
    cmp direction,4
    jz l_go_down
    ;;;;;;;;;;;;;;;;;;;;;;
    go_right:
    cmp sq_cursor_h,7
    jz jump
    
    inc global_cursor

    inc sq_cursor_h

    call get_current_color
    add di,40d;next columnin same row
    push di
    draw_rect_trans sel_color
    pop di
    jump:jmp end_nav
    l_go_down: jmp go_down
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    go_left:
    cmp sq_cursor_h,0
    jz jump
    dec global_cursor

    dec sq_cursor_h
    call get_current_color
    sub di,40d
    push di
    draw_rect_trans sel_color
    pop di
    jmp end_nav
    ;;;;;;;;;;;;;;;;;;;;;;;;
    go_up:
    cmp sq_cursor_v,0
    jz jump

    sub global_cursor,8
    dec sq_cursor_v
    call get_current_color
    sub di,6400d
    push di
    draw_rect_trans sel_color
    pop di
    jmp end_nav
    ;;;;;;;;;;;;;;;;;;;;;;;;
    go_down:
    cmp sq_cursor_v,7
    jz end_nav

    add global_cursor,8

    inc sq_cursor_v
    call get_current_color
    add di,6400d
    push di
    draw_rect_trans sel_color
    pop di
    end_nav:
    ret
Navigate endp
;-----------------
get_current_color proc
 ;get row from 0-7 to 0-199
    mov ax,20d
    mov bl,sq_cursor_v
    mov bh,0
    mul bx  ; ax = y * 20
    mov bx,ax
    ;get column from 0-7 to 0-319
    mov ax,40d
    mov cl,sq_cursor_h
    mov ch,0
    mul cx  ; ax = x * 40
    mov cx,ax
            ;get color of existing pixels
            mov ah,0Dh
            ;mov cx,dx;column
            mov dx,bx;row
            int 10H     ; AL = COLOR of exisiting pixel
            mov current_color,al
            ret
get_current_color endp
;-----------------
wazerr proc
    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l12:
        inc x_new
        inc y_new
        cmp x_new,8
        je exit12
        cmp y_new,8
        je exit12
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l12
exit12:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l13:
        dec x_new
        dec y_new
        cmp x_new,-1
        je exit13
        cmp y_new,-1
        je exit13
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l13
exit13:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l14:
        inc x_new
        dec y_new
        cmp x_new,8
        je exit14
        cmp y_new,-1
        je exit14
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l14
exit14:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l15:
        dec x_new
        inc y_new
        cmp x_new,-1
        je exit15
        cmp y_new,8
        je exit15
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l15
exit15:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l16:
        inc x_new
        cmp x_new,8
        je exit16
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l16
exit16:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l17:
        dec x_new
        cmp x_new,-1
        je exit17
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l17
exit17:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l18:
        inc y_new
        cmp y_new,8
        je exit18
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l18
exit18:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l19:
        dec y_new
        cmp y_new,-1
        je exit19
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l19
exit19:

ret
wazerr endp
;-----------------
horsee proc
    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        inc y_new
        cmp y_new,8
        je exit20
        inc y_new
        cmp x_new,8
        je exit20
        cmp y_new,8
        je exit20
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit20:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        dec y_new
        cmp y_new,-1
        je exit21
        dec y_new
        cmp x_new,-1
        je exit21
        cmp y_new,-1
        je exit21
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit21:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        dec y_new
        cmp y_new,-1
        JE exit22
        dec y_new
        cmp x_new,8
        je exit22
        cmp y_new,-1
        JE exit22
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit22:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        inc y_new
        cmp y_new,8
        je exit23
        inc y_new
        cmp x_new,-1
        je exit23
        cmp y_new,8
        je exit23
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit23:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        cmp x_new,8
        je exit24
        inc x_new
        inc y_new
        cmp x_new,8
        je exit24
        cmp y_new,8
        je exit24
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit24:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        cmp x_new,-1
        je exit25
        dec x_new
        inc y_new
        cmp x_new,-1
        je exit25
        cmp y_new,8
        je exit25
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit25:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        dec x_new
        cmp x_new,-1
        je exit2color_avilable_moves
        dec x_new
        dec y_new
        cmp x_new,-1
        je exit2color_avilable_moves
        cmp y_new,-1
        je exit2color_avilable_moves
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit2color_avilable_moves:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

        inc x_new
        cmp x_new,8
        je exit26
        inc x_new
        dec y_new
        cmp x_new,8
        je exit26
        cmp y_new,-1
        je exit26
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
exit26:

ret
horsee endp
;-----------------
feeel proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l1:
        inc x_new
        inc y_new
        cmp x_new,8
        je exit1
        cmp y_new,8
        je exit1
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l1
exit1:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l2:
        dec x_new
        inc y_new
        cmp x_new,-1
        je exit2
        cmp y_new,8
        je exit2
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l2
exit2:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l3:
        dec x_new
        dec y_new
        cmp x_new,-1
        je exit3
        cmp y_new,-1
        je exit3
          set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l3
exit3:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l4:
        inc x_new
        dec y_new
        cmp x_new,8
        je exit4
        cmp y_new,-1
        je exit4
            set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l4
exit4:

ret
feeel endp
;-----------------
kingg proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc x_new
    cmp x_new,8
    je next1
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next1:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec x_new
    cmp x_new,-1
    je next2
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next2:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc y_new
    cmp y_new,8
    je next3
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next3:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec y_new
    cmp y_new,-1
    je next4
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next4:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc x_new
    inc y_new
    cmp x_new,8
    je next5
    cmp y_new,8
    je next5
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next5:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec x_new
    inc y_new
    cmp x_new,-1
    je next6
    cmp y_new,8
    je next6
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next6:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec x_new
    dec y_new
    cmp x_new,-1
    je next7
    cmp y_new,-1
    je next7
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next7:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc x_new
    dec y_new
    cmp x_new,8
    je next8
    cmp y_new,-1
    je next8
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
    next8:
ret
kingg endp
;-----------------
tabiaa proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l166:
        inc x_new
        cmp x_new,8
        je exit166
                set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l166
exit166:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l266:
        dec x_new
        cmp x_new,-1
        je exit266
                        set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l266
exit266:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l366:
        inc y_new
        cmp y_new,8
        je exit366
                        set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l366
exit366:

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    l466:
        dec y_new
        cmp y_new,-1
        je exit466
                        set_place_available x_new,y_new
          draw_rectangle x_new,y_new,color_avilable_moves;color_avilable_moves is the highlight color
    jmp l466
exit466:

ret
tabiaa endp
;-----------------
soldierr proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    inc y_new
    cmp y_new,8
    je next144
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
next144:

ret
soldierr endp
;-----------------
soldierr_b proc

    mov al,current_x
    mov x_new,al
    mov ah,current_y
    mov y_new,ah

    dec y_new
    cmp y_new,-1
    je next1445
                set_place_available x_new,y_new
    draw_rectangle x_new,y_new,color_avilable_moves
next1445:

ret
soldierr_b endp
;-----------------
draw_piece_by_type proc
;check type of piece
    cmp selected_piece_type,'t'
    jne not_tabiaa
        mov si,offset tabia
    not_tabiaa:
    cmp selected_piece_type,'h'
    jne not_horse
        mov si,offset horse
    not_horse:
    cmp selected_piece_type,'f'
    jne not_fel
        mov si,offset fel
    not_fel:
    cmp selected_piece_type,'w'
    jne not_wazer
        mov si,offset wazer
    not_wazer:
    cmp selected_piece_type,'k'
    jne not_king
        mov si,offset king
    not_king:
    cmp selected_piece_type,'s'
    jne not_soldier
        mov si,offset soldier
    not_soldier:
    ;------------
    cmp selected_piece_type,'T'
    jne not_b_tabiaa
        mov si,offset b_tabia
    not_b_tabiaa:
    cmp selected_piece_type,'H'
    jne not_b_horse
        mov si,offset b_horse
    not_b_horse:
    cmp selected_piece_type,'F'
    jne not_b_fel
        mov si,offset b_fel
    not_b_fel:
    cmp selected_piece_type,'W'
    jne not_b_wazer
        mov si,offset b_wazer
    not_b_wazer:
    cmp selected_piece_type,'K'
    jne not_b_king
        mov si,offset b_king
    not_b_king:
    cmp selected_piece_type,'S'
    jne not_b_soldier
        mov si,offset b_soldier
    not_b_soldier:



mov al,[si]           ;just for storing the piece in piece_background by first pixel
mov piece_background,al;to know background color of piece
mov ax,20d
mov bl,sq_cursor_v
mov bh,0
mul bx  ; ax = y * 20
mov bx,ax
mov piece_y_end,bx
add piece_y_end,20d
l167:
    mov al,sq_cursor_h
    mov ah,0
    mov di,ax
    mov ax,40d
    mul di ;ax = x * 40
    mov di,ax
    mov piece_x_end,di
    add piece_x_end,40d ;40d
    l267:
            mov cx,di;column

            mov dx,bx;row
            mov ax,[si]
            mov ah,0ch  ;draw pixel
            cmp piece_background,al
            je skip_draww
            int 10h
        skip_draww:

            inc si

      inc di
      cmp di,piece_x_end
      jne l267
inc bx
cmp bx,piece_y_end
jne l167

ret
draw_piece_by_type endp
;-----------------
end main